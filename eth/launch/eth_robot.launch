<?xml version="1.0" ?>
<launch>
  <arg name="robot_ip" default="192.168.1.11"/>
  <arg name="arm_id" default="panda" />
  <arg name="load_gripper" default="false" />
<!--   <arg name="controller" default="cartesian_admittance_controller" /> -->
  <arg name="controller" default="cartesian_impedance_example_controller" />
  <arg name="robot"  default="real"  doc="real robot or gazebo simulation? (real or sim)" />
  <arg name="control"  default="topic"  doc="robot control with topic or rviz interactive marker? (topic or marker)" />

  <param name="robot_description" command="$(find xacro)/xacro $(find franka_description)/robots/panda_arm.urdf.xacro hand:=$(arg load_gripper) arm_id:=$(arg arm_id)" />
  <rosparam command="load" file="$(find franka_control)/config/default_controllers.yaml" subst_value="true" />
  <rosparam command="load" file="$(find franka_example_controllers)/config/franka_example_controllers.yaml" />

  <include file="$(find eth)/launch/panda_gazebo.launch" if="$(eval arg('robot') == 'sim')"/>

  <node name="franka_control" pkg="franka_control" type="franka_control_node" if="$(eval arg('robot') == 'real')" output="screen" required="true">
    <rosparam command="load" file="$(find franka_control)/config/franka_control_node.yaml" subst_value="true" />
    <param name="robot_ip" value="$(arg robot_ip)" />
  </node>
  <node name="state_controller_spawner" pkg="controller_manager" type="spawner" if="$(eval arg('robot') == 'real')" respawn="false" output="screen" args="franka_state_controller cartesian_impedance_example_controller" />
  <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" if="$(eval arg('robot') == 'real')" output="screen"/>
  <node name="joint_state_publisher" type="joint_state_publisher" pkg="joint_state_publisher" if="$(eval arg('robot') == 'real')" output="screen">
    <rosparam param="source_list">[franka_state_controller/joint_states] </rosparam>
    <param name="rate" value="30"/>
  </node>

  <node pkg="rviz" type="rviz" output="screen" name="rviz" args="-d $(find franka_example_controllers)/launch/rviz/franka_description_with_marker.rviz"/>

  <node name="robot_haptic" pkg="eth" type="haptic_plain.py" if="$(eval arg('control') == 'topic')" required="true" output="screen" >
    <param name="link_name" value="panda_link0" />
    <remap to="cartesian_impedance_example_controller/equilibrium_pose" from="equilibrium_pose" />
  </node>

  <node name="robot_haptic" pkg="eth" type="Ks_eth.py" if="$(eval arg('control') == 'topic2')" required="true" output="screen" >
    <param name="link_name" value="panda_link0" />
    <remap to="cartesian_impedance_example_controller/equilibrium_pose" from="equilibrium_pose" />
  </node>

  <node name="robot_haptic" pkg="eth" type="Kd_eth.py" if="$(eval arg('control') == 'topic3')" required="true" output="screen" >
    <param name="link_name" value="panda_link0" />
    <remap to="cartesian_impedance_example_controller/equilibrium_pose" from="equilibrium_pose" />
  </node>

  <node name="interactive_marker" pkg="franka_example_controllers" type="interactive_marker.py" if="$(eval arg('control') == 'marker')" required="true" output="screen">
    <param name="link_name" value="panda_link0" />
    <remap from="equilibrium_pose" to="/cartesian_impedance_example_controller/equilibrium_pose" />
  </node>
  <node name="rqt_reconfigure" pkg="rqt_reconfigure" type="rqt_reconfigure" if="$(eval arg('robot') == 'real')" required="false"/>

</launch>